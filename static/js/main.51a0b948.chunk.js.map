{"version":3,"sources":["utils/getWeb3.js","LookUpTable.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","LookUpTable","createTransaction","transaction","idx","to","from","gas","gasPrice","timeStamp","value","react_default","createElement","key","className","Date","toDateString","onClick","_this","props","onHashClicked","toFixed","val","convertValue","transactions","length","uk-spinner","id","map","Component","defaultProps","DEFAULT_HASH","api","etherscanApi","init","App","state","storageValue","accounts","contract","componentDidMount","networkId","deployedNetwork","instance","sent","eth","getAccounts","net","getId","SimpleStorageContract","networks","Contract","abi","address","getTransaction","setState","runExample","error","_callee2","hash","results","_context2","account","txlist","result","sort","b","event","currentTarget","innerHTML","document","querySelector","onSubmitClickedHandler","lookupTransaction","defaultValue","LookUpTable_LookUpTable","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kaAqCeA,EAnCC,kBACd,IAAIC,QAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxBC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAgC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAE1Bf,OAAOgB,SAFmB,CAAAH,EAAAE,KAAA,gBAGtBP,EAAO,IAAIS,IAAKjB,OAAOgB,UAHDH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMpBf,OAAOgB,SAASE,SANI,OAQ1BpB,EAAQU,GARkBK,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAU1Bd,EAAMc,EAAAM,IAVoB,QAAAN,EAAAE,KAAA,iBAcrBf,OAAOQ,MAERA,EAAOR,OAAOQ,KACpBY,QAAQC,IAAI,2BACZvB,EAAQU,KAIFE,EAAW,IAAIO,IAAKK,UAAUC,aAClC,yBAEIf,EAAO,IAAIS,IAAKP,GACtBU,QAAQC,IAAI,gDACZvB,EAAQU,IA3BoB,yBAAAK,EAAAW,SAAAjB,EAAAkB,KAAA,kCCDfC,qNACnBC,kBAAoB,SAAEC,EAAaC,GAAO,IAEtCC,EAMEF,EANFE,GACAC,EAKEH,EALFG,KACAC,EAIEJ,EAJFI,IACAC,EAGEL,EAHFK,SACAC,EAEEN,EAFFM,UACAC,EACEP,EADFO,MAOF,OACEC,EAAA/B,EAAAgC,cAAA,SAAOC,IAAMT,GACXO,EAAA/B,EAAAgC,cAAA,MAAIE,UAAU,WACZH,EAAA/B,EAAAgC,cAAA,UAAM,IAAIG,KAAkB,IAAZN,GAAmBO,gBACnCL,EAAA/B,EAAAgC,cAAA,UAAID,EAAA/B,EAAAgC,cAAA,KAAGK,QAAUC,EAAKC,MAAMC,eAAkBf,IAC9CM,EAAA/B,EAAAgC,cAAA,UAAID,EAAA/B,EAAAgC,cAAA,KAAGK,QAAUC,EAAKC,MAAMC,eAAkBd,IAC9CK,EAAA/B,EAAAgC,cAAA,UAAML,GACNI,EAAA/B,EAAAgC,cAAA,WAViC,MAUVJ,GAV8Ba,QAAQ,IAW7DV,EAAA/B,EAAAgC,cAAA,UAVe,SAAAU,GAAG,OAAW,MAANA,GAA2BD,QAAQ,GAUpDE,CAAcb,+EAO1B,OAAuC,IAAnCV,KAAKmB,MAAMK,aAAaC,OAClBd,EAAA/B,EAAAgC,cAAA,OAAKE,UAAU,SAASY,aAAW,aAK3Cf,EAAA/B,EAAAgC,cAAA,OAAKe,GAAG,gBACNhB,EAAA/B,EAAAgC,cAAA,aACED,EAAA/B,EAAAgC,cAAA,aACED,EAAA/B,EAAAgC,cAAA,MAAIE,UAAU,QACZH,EAAA/B,EAAAgC,cAAA,kBACAD,EAAA/B,EAAAgC,cAAA,gBACAD,EAAA/B,EAAAgC,cAAA,kBACAD,EAAA/B,EAAAgC,cAAA,iBACAD,EAAA/B,EAAAgC,cAAA,sBACAD,EAAA/B,EAAAgC,cAAA,qBAGAZ,KAAKmB,MAAMK,aAAaI,IAAK5B,KAAKE,4BAhDP2B,cAuDzC5B,EAAY6B,aAAe,CACzBN,aAAe,eCnDXO,EAAe,6CAEjBC,EAAMC,IAAaC,KADb,sCA4FKC,6MAxFbC,MAAQ,CACNC,aAAc,EACdtD,KAAM,KACNuD,SAAU,KACVC,SAAU,KACVf,aAAc,MAGhBgB,uCAAoB,SAAA1D,IAAA,IAAAC,EAAAuD,EAAAG,EAAAC,EAAAC,EAAA,OAAAhE,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGGnB,IAHH,cAGVY,EAHUK,EAAAwD,KAAAxD,EAAAE,KAAA,EAMOP,EAAK8D,IAAIC,cANhB,cAMVR,EANUlD,EAAAwD,KAAAxD,EAAAE,KAAA,EASQP,EAAK8D,IAAIE,IAAIC,QATrB,OASVP,EATUrD,EAAAwD,KAUVF,EAAkBO,EAAsBC,SAAST,GAEjDE,EAAW,IAAI5D,EAAK8D,IAAIM,SAC5BF,EAAsBG,IACtBV,GAAmBA,EAAgBW,SAGrCnC,EAAKoC,eAAgBvB,GAIrBb,EAAKqC,SAAS,CAAExE,OAAMuD,WAAUC,SAAUI,GAAYzB,EAAKsC,YArB3CpE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAwBhBO,QAAQ8D,MAARrE,EAAAM,IAxBgB,yBAAAN,EAAAW,SAAAjB,EAAAkB,KAAA,eAgCpBsD,qDAAiB,SAAAI,EAAOC,GAAP,IAAAnC,EAAAoC,EAAA,OAAAjF,EAAAC,EAAAO,KAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,cAEf4B,EAAKqC,SAAU,CAAE/B,aAAc,KAFhBqC,EAAAvE,KAAA,EAIU0C,EAAI8B,QAAQC,OAAQJ,GAJ9B,OAIXnC,EAJWqC,EAAAjB,KAOXgB,EAAUpC,EAAawC,OAAOC,KAAM,SAACrF,EAAGsF,GAAJ,OAAUA,EAAEzD,UAAY7B,EAAE6B,YAElES,EAAKqC,SAAU,CAAE/B,aAAcoC,IAThB,wBAAAC,EAAA9D,SAAA2D,EAAA1D,iEAYjBoB,cAAgB,SAAE+C,GAChB,IAAMR,EAAOQ,EAAMC,cAAcC,UAEjCC,SAASC,cAAc,eAAe7D,MAAQiD,KAGhDa,uBAAyB,SAAEL,GACzB,IAAMR,EAAOW,SAASC,cAAc,eAAe7D,MAEnDQ,EAAKoC,eAAgBK,yHAIrB,OAAK3D,KAAKoC,MAAMrD,KAId4B,EAAA/B,EAAAgC,cAAA,OAAKE,UAAU,OACbH,EAAA/B,EAAAgC,cAAA,wCACAD,EAAA/B,EAAAgC,cAAA,MAAIe,GAAG,QAAP,uFACAhB,EAAA/B,EAAAgC,cAAA,OAAKe,GAAG,eACJhB,EAAA/B,EAAAgC,cAAA,aACAD,EAAA/B,EAAAgC,cAAA,SACEE,UAAU,aACVG,QAAUjB,KAAKyE,kBACfC,aAAe3C,IACjBpB,EAAA/B,EAAAgC,cAAA,UACEE,UAAU,8BACVG,QAAUjB,KAAKwE,wBAFjB,WAIJ7D,EAAA/B,EAAAgC,cAAC+D,EAAD,CAAanD,aAAexB,KAAKoC,MAAMZ,aAAeJ,cAAgBpB,KAAKoB,iBAhBrET,EAAA/B,EAAAgC,cAAA,OAAKE,UAAU,SAASY,aAAW,oBAnE/BG,aCDE+C,QACW,cAA7BrG,OAAOsG,SAASC,UAEe,UAA7BvG,OAAOsG,SAASC,UAEhBvG,OAAOsG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAA/B,EAAAgC,cAACsE,EAAD,MAASZ,SAASa,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.51a0b948.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\n\nimport './LookUpTable.scss';\n\nexport default class LookUpTable extends Component {\n  createTransaction = ( transaction, idx )=>{\n    const{\n      to,\n      from,\n      gas,\n      gasPrice,\n      timeStamp,\n      value\n    } = transaction;\n\n    // magic numbers to get it looking like the etherscan numbers\n    const convertGasPrice = val =>  (val * .00000000000000001).toFixed(8);\n    const convertValue = val => (val * .000000000000000001).toFixed(7);\n\n    return(\n      <tbody key={ idx }>\n        <tr className=\"results\">\n          <td>{ new Date( timeStamp * 1000 ).toDateString() }</td>\n          <td><a onClick={ this.props.onHashClicked }>{ to }</a></td>\n          <td><a onClick={ this.props.onHashClicked }>{ from }</a></td>\n          <td>{ gas }</td>\n          <td>{ convertGasPrice( gasPrice ) }</td>\n          <td>{ convertValue( value ) }</td>\n        </tr>\n      </tbody>\n    )\n  }\n\n  render(){\n    if( this.props.transactions.length === 0 ){\n      return (<div className=\"loader\" uk-spinner=\"ratio: 3\"></div>);\n    }\n\n    return(\n      // would use a flex box with more time...\n      <div id=\"lookup-table\">\n        <table>\n          <tbody>\n            <tr className=\"info\">\n              <td>date</td>\n              <td>to</td>\n              <td>from</td>\n              <td>gas</td>\n              <td>gasPrice</td>\n              <td>value</td>\n            </tr>\n          </tbody>\n            { this.props.transactions.map( this.createTransaction ) }\n        </table>\n      </div>\n    )\n  }\n}\n\nLookUpTable.defaultProps = {\n  transactions : []\n};\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n\nimport getWeb3 from \"./utils/getWeb3\";\nimport etherscanApi from 'etherscan-api/dist/bundle.js';\n\nimport LookUpTable from './LookUpTable.js';\nimport \"./App.scss\";\n\nconst DEFAULT_HASH = \"0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae\"\nvar key = 'NJ9ERA6N3DAQ8EZHU6B9SZF3Y77EJIUW1T';\nvar api = etherscanApi.init( key );\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    transactions: []\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n;\n      this.getTransaction( DEFAULT_HASH );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.error(error);\n    }\n  };\n\n  lookupTransaction(){\n\n  }\n\n  getTransaction = async( hash ) => {\n    // reset the transaction state\n    this.setState( { transactions: [] });\n\n    let transactions = await api.account.txlist( hash );\n\n    // Sort to get most recent transactions\n    let results = transactions.result.sort( (a, b) => b.timeStamp - a.timeStamp );\n\n    this.setState( { transactions: results });\n  }\n\n  onHashClicked = ( event )=>{\n    const hash = event.currentTarget.innerHTML;\n\n    document.querySelector('.hash-input').value = hash;\n  }\n\n  onSubmitClickedHandler = ( event )=>{\n    const hash = document.querySelector('.hash-input').value;\n\n    this.getTransaction( hash );\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return (<div className=\"loader\" uk-spinner=\"ratio: 3\"></div>);\n    }\n    return (\n      <div className=\"App\">\n        <h1> Etherscan Address Lookup </h1>\n        <h3 id=\"copy\">Paste an account hash into the field and submit to retrieve a list of transactions.</h3>\n        <div id=\"lookup-form\">\n            <span></span>\n            <input\n              className=\"hash-input\"\n              onClick={ this.lookupTransaction }\n              defaultValue={ DEFAULT_HASH }></input>\n            <button\n              className=\"uk-button uk-button-primary\"\n              onClick={ this.onSubmitClickedHandler }>Submit</button>\n          </div>\n        <LookUpTable transactions={ this.state.transactions } onHashClicked={ this.onHashClicked }></LookUpTable>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}